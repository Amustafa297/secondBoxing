/**
 * This code defines the application controller class, which acts 
 * as an intermediary between the model and the view. It retrieves data from the model and displays 
 * it on the view, while also monitoring user interactions with the view and updating the model accordingly.

 * In addition, the controller contains event handler methods that handle various types of events. These methods are 
 * responsible for managing the behavior of the application in response to user interactions.
 */

export class controller {
/**
     * Creates an object representing the animal controller.
     * 
     * @param {type} model - The model the controller interacts with.
     * @param {type} view - The view the controller interatcs with.
     * @returns {AnimalController} The object representing the animal controller.
     */
    constructor(model, view) {
        this.model = model;
        this.view = view;


        let properties = this.model.getProperties();
        this.view.renderSelects(properties);

        let theID = properties[0];
        this.view.addOptions(theID, this.model.getOptions(theID));

        this.view.select.forEach((select) => {
            select.addEventListener('change', this.handleSelectChange);
        });
        document.getElementById("submitBTN").disabled=true;
        
        return this.view.gloveForm.addEventListener('submit', this.handleFormSubmit);
    }
    /**
     * Handles the change event generated by a select. When 'change' event is 
     * triggered, 
     * @param {type} event
     * @returns {undefined}
     */
    handleSelectChange = (event) => {
        let select = event.target;
 
        this.model[select.id] = select.value;
        this.model.resetNextProperties(select.id);
        console.log(this.model);
   
        this.view.resetNextSiblings(select.id);
        let nextSelect = select.nextElementSibling;
        if (select.selectedIndex > 0 && nextSelect) {
            this.view.addOptions(nextSelect.id, this.model.getOptions(nextSelect.id));
        }
        
        this.view.renderGlove();
        this.view.validator();
        
    }
    handleFormSubmit = (event) => {
        //event.preventDefault();
        this.model.persist();
    }
}